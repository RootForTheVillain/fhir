buildscript {
	repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        mavenCentral()
	}
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.0.1.RELEASE'
        classpath 'gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.19.0'
    }
}

/*group = 'io.arbormetrix'*/

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'
/*
bootJar {
    baseName = 'api'
    version =  '0.0.0.1-SNAPSHOT'
}*/

repositories {
    mavenCentral()
}

/*sourceCompatibility = 1.7
targetCompatibility = 1.7

docker {
	name "${project.group}/${jar.baseName}"
	files jar.archivePath
	buildArgs(['JAR_FILE': "${jar.archiveName}"])
}*/

/*bootJar {
	baseName = "api"
	group    = "io.arbormetrix"
	version  = "0.0.1-SNAPSHOT"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = "io.arbormetrix.api.Application"
*/
dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}




/*
buildscript {
	ext {
		gradleDockerVersion   = "1.2"
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.1.RELEASE")
		classpath("se.transmode.gradle:gradle-docker:${gradleDockerVersion}")
	}
}

plugins { id "io.spring.dependency-management" version "1.0.4.RELEASE" }

apply plugin: "java"
apply plugin: "application"
apply plugin: "docker"
apply plugin: 'io.spring.dependency-management'
apply plugin: "org.springframework.boot"

sourceCompatibility = 1.7
mainClassName = "io.arbormetrix.api.Application"

jar {
    baseName = "api"
    group    = "io.arbormetrix"
    version  = "0.0.1-SNAPSHOT"
    manifest { attributes "Main-Class": "io.arbormetrix.api.Application" }
}

docker {
    baseImage "anapsix/alpine-java"
}

repositories {
	mavenCentral()
}

dependencies {
	compile("org.springframework.boot:spring-boot-starter-web:2.0.1.RELEASE")
	//compile 'org.springframework.boot:spring-boot-starter-data-jpa'
	testCompile("junit:junit")
}

distDocker {
	exposePort 8080
}
*/